import requests
import zipfile
import os
import sys
import pandas as pd
from datetime import datetime
import time  # రేట్ లిమిట్ కోసం
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib.styles import getSampleStyleSheet

# NVD API URL
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

# హెల్ప్ మాన్యువల్ ప్రింట్ చేయడం
def print_help():
    help_text = """
    JarCVEScanner - A tool to scan Java JAR files for vulnerabilities using NVD CVE data.

    Usage:
        python JarCVEScanner.py [OPTIONS]

    Options:
        -f <folder_path>    Specify the folder containing JAR files to scan (required).
        -k <api_key>        Provide your NVD API key (optional, improves rate limits).
        -o <format>         Output format: 'csv' (default) or 'pdf'.
        -h                  Show this help message and exit.

    Examples:
        python JarCVEScanner.py -f "libs"                   # Scan 'libs' folder, output as CSV
        python JarCVEScanner.py -f "libs" -o "pdf"          # Scan 'libs' folder, output as PDF
        python JarCVEScanner.py -f "C:\\libs" -k "your-key" # Scan with API key, output as CSV

    Notes:
        - Place all JAR files in a folder and provide its path with -f.
        - Get an NVD API key from https://nvd.nist.gov/developers/request-an-api-key.
    """
    print(help_text)

# ఫోల్డర్ నుంచి JAR ఫైల్స్ లిస్ట్ తీసుకోవడం
def read_jar_list_from_folder(folder_path):
    jar_files = []
    if not os.path.isdir(folder_path):
        print(f"Error: {folder_path} is not a valid directory")
        return jar_files
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith('.jar'):
                jar_files.append(os.path.join(root, file))
    return jar_files

# JAR ఫైల్ నుంచి మెటాడేటా ఎక్స్‌ట్రాక్ట్ చేయడం
def extract_jar_metadata(jar_path):
    try:
        with zipfile.ZipFile(jar_path, 'r') as jar:
            if 'META-INF/MANIFEST.MF' in jar.namelist():
                with jar.open('META-INF/MANIFEST.MF') as manifest:
                    manifest_data = manifest.read().decode('utf-8', errors='ignore')  # ఎన్‌కోడింగ్ ఇష్యూస్ ఫిక్స్
                    metadata = {}
                    for line in manifest_data.splitlines():
                        if ':' in line:
                            key, value = line.split(':', 1)
                            metadata[key.strip()] = value.strip()
                    return metadata.get('Implementation-Title', 'Unknown'), metadata.get('Implementation-Version', 'Unknown')
            else:
                return "Unknown", "Unknown"
    except Exception as e:
        print(f"Error reading {jar_path}: {e}")
        return "Unknown", "Unknown"

# NVD API నుంచి CVE డేటా ఫెచ్ చేయడం
def fetch_cve_data(library_name, version, api_key=None):
    headers = {'apiKey': api_key} if api_key else {}
    params = {
        'keywordSearch': f"{library_name} {version}",
        'resultsPerPage': 50
    }
    try:
        # రేట్ లిమిట్ దాటకుండా 12 సెకండ్స్ వెయిట్ (API కీ లేకపోతే)
        if not api_key:
            time.sleep(12)
        response = requests.get(NVD_API_URL, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get('vulnerabilities', [])
        else:
            print(f"Error fetching CVE for {library_name} {version}: {response.status_code}")
            return []
    except Exception as e:
        print(f"Exception fetching CVE: {e}")
        return []

# CSV ఫైల్‌గా సేవ్ చేయడం
def save_to_csv(report, output_file):
    data = []
    for result in report["results"]:
        if result["cve_details"]:
            for cve in result["cve_details"]:
                data.append({
                    "JAR Path": result["jar_path"],
                    "Library Name": result["library_name"],
                    "Version": result["version"],
                    "CVE ID": cve["cve_id"],
                    "Description": cve["description"]
                })
        else:
            data.append({
                "JAR Path": result["jar_path"],
                "Library Name": result["library_name"],
                "Version": result["version"],
                "CVE ID": "None",
                "Description": "No vulnerabilities found"
            })
    try:
        df = pd.DataFrame(data)
        df.to_csv(output_file, index=False)
        print(f"CSV report saved to {output_file}")
    except Exception as e:
        print(f"Error saving CSV: {e}")

# PDF ఫైల్‌గా సేవ్ చేయడం
def save_to_pdf(report, output_file):
    try:
        doc = SimpleDocTemplate(output_file, pagesize=letter)
        styles = getSampleStyleSheet()
        elements = []
        elements.append(Paragraph(f"Jar CVE Scan Report - {report['timestamp']}", styles['Title']))
        elements.append(Spacer(1, 12))
        table_data = [["JAR Path", "Library Name", "Version", "CVE ID", "Description"]]
        for result in report["results"]:
            if result["cve_details"]:
                for cve in result["cve_details"]:
                    table_data.append([
                        result["jar_path"],
                        result["library_name"],
                        result["version"],
                        cve["cve_id"],
                        Paragraph(cve["description"], styles['BodyText'])
                    ])
            else:
                table_data.append([
                    result["jar_path"],
                    result["library_name"],
                    result["version"],
                    "None",
                    Paragraph("No vulnerabilities found", styles['BodyText'])
                ])
        table = Table(table_data, colWidths=[100, 80, 50, 80, 200])
        table.setStyle([('GRID', (0, 0), (-1, -1), 1, 'black')])
        elements.append(table)
        doc.build(elements)
        print(f"PDF report saved to {output_file}")
    except Exception as e:
        print(f"Error saving PDF: {e}")

# స్కాన్ చేసి రిపోర్ట్ జనరేట్ చేయడం
def scan_jars(jar_list, output_format="csv", api_key=None):
    report = {"timestamp": str(datetime.now()), "results": []}
    for jar_path in jar_list:
        library_name, version = extract_jar_metadata(jar_path)
        print(f"Scanning {jar_path} - Library: {library_name}, Version: {version}")
        cve_data = fetch_cve_data(library_name, version, api_key)
        result = {
            "jar_path": jar_path,
            "library_name": library_name,
            "version": version,
            "cve_count": len(cve_data),
            "cve_details": []
        }
        for cve in cve_data:
            try:
                description = cve['cve']['descriptions'][0]['value'] if cve['cve']['descriptions'] else "No description available"
                result["cve_details"].append({
                    "cve_id": cve['cve']['id'],
                    "description": description
                })
            except (KeyError, IndexError) as e:
                print(f"Error parsing CVE data for {jar_path}: {e}")
        report["results"].append(result)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    if output_format.lower() == "csv":
        output_file = f"scan_report_{timestamp}.csv"
        save_to_csv(report, output_file)
    elif output_format.lower() == "pdf":
        output_file = f"scan_report_{timestamp}.pdf"
        save_to_pdf(report, output_file)
    else:
        output_file = f"scan_report_{timestamp}.json"
        try:
            with open(output_file, 'w') as f:
                json.dump(report, f, indent=4)
            print(f"JSON report saved to {output_file}")
        except Exception as e:
            print(f"Error saving JSON: {e}")

# కమాండ్ లైన్ ఆర్గ్యుమెంట్స్ పార్స్ చేయడం
def parse_args():
    folder_path = None
    api_key = None
    output_format = "csv"

    args = sys.argv[1:]
    i = 0
    while i < len(args):
        if args[i] == "-h":
            print_help()
            sys.exit(0)
        elif args[i] == "-f" and i + 1 < len(args):
            folder_path = args[i + 1]
            i += 2
        elif args[i] == "-k" and i + 1 < len(args):
            api_key = args[i + 1]
            i += 2
        elif args[i] == "-o" and i + 1 < len(args):
            output_format = args[i + 1]
            i += 2
        else:
            print(f"Unknown option: {args[i]}")
            print_help()
            sys.exit(1)
    
    if not folder_path:
        print("Error: Folder path (-f) is required!")
        print_help()
        sys.exit(1)
    
    return folder_path, api_key, output_format

# మెయిన్ ఫంక్షన్
if __name__ == "__main__":
    folder_path, api_key, output_format = parse_args()
    jar_list = read_jar_list_from_folder(folder_path)
    if jar_list:
        scan_jars(jar_list, output_format=output_format, api_key=api_key)
    else:
        print("No JAR files found in the specified folder!")
        sys.exit(1)
